cmake_minimum_required(VERSION 3.20)
project(Cpp23Example VERSION 1.0.0 LANGUAGES CXX)

# Set C++23 as the standard
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Add example executable
add_executable(cpp23_features cpp23_features_standalone.cpp)
target_compile_features(cpp23_features PRIVATE cxx_std_23)

# Compiler-specific flags for C++23 support
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    # GCC flags
    target_compile_options(cpp23_features PRIVATE -Wall -Wextra -pedantic -fconcepts-diagnostics-depth=10)
    message(STATUS "Using GCC compiler with C++23")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    # Clang flags
    target_compile_options(cpp23_features PRIVATE -Wall -Wextra -pedantic -stdlib=libc++)
    target_link_options(cpp23_features PRIVATE -stdlib=libc++)
    message(STATUS "Using Clang compiler with C++23")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    # MSVC flags
    target_compile_options(cpp23_features PRIVATE /W4 /permissive- /Zc:__cplusplus /Zc:preprocessor)
    message(STATUS "Using MSVC compiler with C++23")
endif()

# Optional: Find GoogleTest
find_package(GTest QUIET)
if(GTest_FOUND)
    message(STATUS "GoogleTest found, building test executable")
    add_executable(cpp23_tests cpp23_test_example.cpp)
    target_link_libraries(cpp23_tests PRIVATE GTest::gtest GTest::gtest_main GTest::gmock)
    target_compile_features(cpp23_tests PRIVATE cxx_std_23)
    
    if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        target_compile_options(cpp23_tests PRIVATE -Wall -Wextra -pedantic -stdlib=libc++)
        target_link_options(cpp23_tests PRIVATE -stdlib=libc++)
    endif()
    
    enable_testing()
    add_test(NAME Cpp23Tests COMMAND cpp23_tests)
else()
    message(STATUS "GoogleTest not found, skipping test executable")
endif()

# Print compiler information
message(STATUS "C++ Standard: C++23")
message(STATUS "Compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}")
